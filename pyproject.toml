[project]
name = "aegis-ipc"
version = "0.1.0"
description = "A high-performance IPC framework for distributed systems"
readme = "README.md"
requires-python = ">=3.13"
license = { text = "MIT" }
authors = [{ name = "AegisIPC Team", email = "team@aegisipc.com" }]
keywords = ["ipc", "distributed", "messaging", "nats", "rpc"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
dependencies = [
    "fastapi>=0.115.6",
    "httpx>=0.28.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
package = false
dev-dependencies = [
    # Code formatting
    "black==24.10.0",
    "ruff==0.8.3",

    # Type checking
    "mypy==1.13.0",
    "types-pyyaml==6.0.12.20240917",
    "types-requests==2.32.0.20241016",
    "pytest-stub==1.1.0",

    # Testing
    "pytest==8.3.4",
    "pytest-cov==6.0.0",
    "pytest-asyncio==0.25.0",
    "pytest-timeout==2.3.1",
    "pytest-mock==3.14.0",
    "hypothesis==6.122.3",

    # Security scanning
    "bandit[toml]==1.8.0",
    "pip-audit==2.7.3",

    # Git hooks
    "pre-commit==4.0.1",

    # Documentation
    "mkdocs==1.6.1",
    "mkdocs-material==9.5.50",
    "mkdocstrings[python]==0.27.0",
]

[tool.uv.workspace]
members = [
    "packages/ipc_router",
    "packages/ipc_client_sdk",
    "packages/ipc_cli",
]

[tool.uv.sources]
ipc-router = { workspace = true }
ipc-client-sdk = { workspace = true }
ipc-cli = { workspace = true }

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py313"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S102", "S103", "S104", "S105", "S106"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true
explicit_package_bases = true
namespace_packages = true

[[tool.mypy.overrides]]
module = "*.tests.*"
disallow_untyped_decorators = false
warn_unused_ignores = false
warn_unreachable = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_decorators = false
warn_unused_ignores = false
warn_unreachable = false

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["packages"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=packages",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--import-mode=importlib",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "e2e: End-to-end tests",
]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
branch = true
source = ["packages"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
fail_under = 80

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", "build", "dist"]
skips = []
tests = ["B201", "B301"]  # Include all tests

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]
