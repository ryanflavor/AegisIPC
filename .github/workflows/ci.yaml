name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.8.0"

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --all-extras

      - name: Run Black
        run: uv run black --check .

      - name: Run Ruff
        run: uv run ruff check .

      - name: Run Mypy
        run: uv run mypy packages/

      - name: Run Bandit Security Check
        run: uv run bandit -r packages/ -f json -o bandit-report.json || true

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  # Unit Tests
  test:
    name: Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --all-extras

      - name: Run pytest
        run: |
          uv run pytest -v --cov=packages --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/

  # Integration Tests with Docker Compose
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services
        run: |
          docker compose up -d
          docker compose ps

      - name: Wait for services to be healthy
        run: |
          timeout 60s bash -c 'until docker compose ps | grep -q "healthy"; do sleep 1; done'

      - name: Run integration tests
        run: |
          docker compose exec -T ipc-router python -m pytest tests/ -v -m integration || true

      - name: Show service logs
        if: always()
        run: docker compose logs

      - name: Stop services
        if: always()
        run: docker compose down -v

  # Build Docker Images
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ipc-router image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/ipc_router/Dockerfile
          push: false
          tags: aegis-ipc/ipc-router:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # All checks passed
  all-checks:
    name: All Checks Passed
    needs: [quality, test, integration, docker, security]
    runs-on: ubuntu-latest
    steps:
      - name: All checks passed
        run: echo "All CI checks passed successfully!"
